{"version":3,"sources":["components/Header/logo.svg","actions/index.js","constants/initial-state.js","endpoints/index.js","helpers/index.js","logic/index.js","store.js","reducers/index.js","components/Header/index.js","components/SRSelector/SRSelector.js","components/SRSelector/index.js","components/SRSelector/connectors.js","components/SRIndex/SRIndex.js","components/SRIndex/index.js","components/SRIndex/connectors.js","components/ThreadView/ThreadView.js","components/ThreadView/index.js","components/ThreadView/connectors.js","components/LandingPage/index.js","components/LandingPage/LandingPage.js","logic/router-events.js","components/HOC/index.js","app.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","loadSuccess","type","subreddit","arguments","length","undefined","data","position","markers","loadFailure","message","setSubreddit","initial_state","endpoints","after","concat","dataPreprocess","response","markerNext","payload","children","err","Error","subredditFromPathString","string","replace","split","logic","createLogic","cancelType","latest","process","_ref","dispatch","done","httpClient","getState","action","get","endpoint","then","resp","_dataPreprocess","newMarkers","catch","_ref2","state","newPosition","newMarker","_dataPreprocess2","_ref3","oldPosition","Math","max","logicDeps","axios","logicMiddleware","createLogicMiddleware","logicArr","middleware","applyMiddleware","enhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","initialState","stateChanges","$set","update","src_store","myLink","react_default","a","createElement","href","target","rel","Header","className","id","src","logo","alt","SRSelector","withRouter","match","goBackward","goForward","defaultValue","params","onChange","value","Link","to","onClick","withState","connect","SRIndex","_ref$data","components_SRSelector","map","key","title","ThreadView","threadId","find","thread","selftext","JSON","stringify","LandingPage","props","history","createHistory","getStore","lastSubreddit","listen","location","curSubreddit","pathname","includes","QueryParamHOC","propNames","Child","forEach","propName","NewChild","withProps","Notfound","App","Router","Switch","Route","exact","path","component","Boolean","hostname","ReactDOM","render","es","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.652ab710.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\n/* Do not use action types in tests */\n/* Use action creators instead */\nexport const CANCEL_FETCH = 'CANCEL_FETCH'\nexport const GO_FORWARD = 'GO_FORWARD'\nexport const GO_BACKWARD = 'GO_BACKWARD'\nexport const LOAD_SUCCESS = 'LOAD_SUCCESS'\nexport const LOAD_FAILURE = 'LOAD_FAILURE'\nexport const SET_SUBREDDIT = 'SET_SUBREDDIT'\n/* Do not use action types in tests */\n/* Use action creators instead */\n\n\nexport const cancelFetch = () => ({\n    type: CANCEL_FETCH,\n})\nexport const loadSuccess = (\n    subreddit = 'reactjs',\n    data = [],\n    position = 0,\n    markers = [''],\n) => ({\n    type: LOAD_SUCCESS,\n    subreddit,\n    data,\n    position,\n    markers,\n})\nexport const loadFailure = (message) => ({\n    type: LOAD_FAILURE,\n    message,\n})\nexport const setSubreddit = (subreddit) => ({\n    type: SET_SUBREDDIT,\n    subreddit,\n    position: 0,\n})\nexport const goForward = () => ({\n\ttype: GO_FORWARD,\n})\nexport const goBackward = () => ({\n\ttype: GO_BACKWARD,\n})\n","\nexport default {\n\tsubreddit: 'reactjs',\n\tmessage: null,\n\tmarkers: [''],\n\tposition: 0, // param for pagination\n    data: [],\n}\n","\nexport default (subreddit = 'reactjs', after = null) => {\n\n    after = !!after ? `&after=${after}` : ''\n    return `https://www.reddit.com/r/${subreddit}.json?limit=24${after}`\n}\n","\nexport const dataPreprocess = (response) => {\n\n\tlet data = []\n\tlet markerNext = ''\n\ttry {\n\t\tconst payload = response.data\n\t\tmarkerNext = payload.data.after\n\t\tdata = payload.data.children\n\t}\n\tcatch (err) {\n\t\tthrow new Error('invalid data received')\n\t}\n\n\treturn {data, markerNext}\n}\n\nexport const subredditFromPathString = (string) => (\n\tstring.replace(/^\\//, '').split('/')[1]\n)\n","import {createLogic} from 'redux-logic'\nimport endpoint from 'src/endpoints'\nimport {\n\tSET_SUBREDDIT,\n\tCANCEL_FETCH,\n\tGO_FORWARD,\n\tGO_BACKWARD,\n\tloadSuccess,\n\tloadFailure,\n} from 'src/actions'\nimport {dataPreprocess} from 'src/helpers'\n\n\nexport default [\n\n\tcreateLogic({\n\t\ttype: SET_SUBREDDIT,\n\t\tcancelType: CANCEL_FETCH,\n\t\tlatest: true,\n\t\tprocess: ({httpClient, getState, action}, dispatch, done) => {\n\n\t\t\tconst {subreddit} = action\n\n\t\t\treturn httpClient\n\t\t\t.get(endpoint(subreddit, null))\n\t\t\t.then((resp) => {\n\t\t\t\tconst {data, markerNext} = dataPreprocess(resp, '')\n\t\t\t\tconst newMarkers = [''].concat(markerNext)\n\t\t\t\tdispatch(loadSuccess(subreddit, data, 0, newMarkers))\n\t\t\t\tdone()\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdispatch(loadFailure(err.message))\n\t\t\t\tdone()\n\t\t\t})\n\t\t}\n\t}),\n\n\tcreateLogic({\n\t\ttype: GO_FORWARD,\n\t\tcancelType: CANCEL_FETCH,\n\t\tlatest: true,\n\t\tprocess: ({httpClient, getState, action}, dispatch, done) => {\n\n\t\t\tconst state = getState()\n\t\t\tconst {subreddit, markers, position: oldPosition} = state\n\n\t\t\tlet newPosition = oldPosition + 1\n\t\t\tconst newMarker = markers[newPosition]\n\t\t\thttpClient\n\t\t\t.get(endpoint(subreddit, newMarker))\n\t\t\t.then((resp) => {\n\t\t\t\tconst {data, markerNext} = dataPreprocess(resp, '')\n\t\t\t\tconst newMarkers = markers.concat(markerNext)\n\t\t\t\tdispatch(loadSuccess(subreddit, data, newPosition, newMarkers))\n\t\t\t\tdone()\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdispatch(loadFailure(err.message))\n\t\t\t\tdone()\n\t\t\t})\n\t\t}\n\t}),\n\n\tcreateLogic({\n\t\ttype: GO_BACKWARD,\n\t\tcancelType: CANCEL_FETCH,\n\t\tlatest: true,\n\t\tprocess: ({httpClient, getState, action}, dispatch, done) => {\n\n\t\t\tconst state = getState()\n\t\t\tconst {subreddit, markers, position: oldPosition} = state\n\n\t\t\tlet newPosition = oldPosition\n\t\t\tif (oldPosition < 1 || markers[oldPosition] === '') {\n\t\t\t\tdone()\n\t\t\t}\n\n\t\t\tnewPosition = Math.max(0, oldPosition - 1)\n\n\t\t\tconst newMarker = markers[newPosition]\n\t\t\thttpClient\n\t\t\t.get(endpoint(subreddit, newMarker))\n\t\t\t.then((resp) => {\n\t\t\t\tconst {data} = dataPreprocess(resp, '')\n\t\t\t\tdispatch(loadSuccess(subreddit, data, newPosition, markers))\n\t\t\t\tdone()\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdispatch(loadFailure(err.message))\n\t\t\t\tdone()\n\t\t\t})\n\t\t}\n\t}),\n\n]\n","// boilerplate for redux-logic, based on:\n// https://github.com/zalmoxisus/redux-devtools-extension\n// https://github.com/jeffbski/redux-logic/blob/master/examples/search-async-fetch/src/configureStore.js\n\nimport axios from 'axios'\nimport {compose, createStore, applyMiddleware} from 'redux'\nimport {createLogicMiddleware} from 'redux-logic'\nimport rootReducer from 'src/reducers/'\nimport logicArr from 'src/logic/'\nimport initialState from 'src/constants/initial-state'\n\nconst logicDeps = {\n\thttpClient: axios,\n}\nconst logicMiddleware = createLogicMiddleware(\n\tlogicArr,\n\tlogicDeps,\n)\nconst middleware = applyMiddleware(\n\tlogicMiddleware,\n)\nconst _compose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst enhancers = _compose(middleware)\n\nconst store = createStore(\n\trootReducer,\n\tinitialState,\n\tenhancers,\n)\nexport default () => store\n","import {\n\tLOAD_SUCCESS,\n\tLOAD_FAILURE,\n} from 'src/actions'\nimport initialState from 'src/constants/initial-state'\nimport update from 'immutability-helper'\n\n\nexport default (state = initialState, action = {}) => {\n\n\tswitch (action.type) {\n\n\t\tcase LOAD_SUCCESS:\n\t\t\tconst {subreddit, data, position, markers} = action\n\n\t\t\tconst stateChanges = {\n\t\t\t\tsubreddit: {$set: subreddit},\n\t\t\t\tmessage: {$set: null},\n\t\t\t\tdata: {$set: data},\n\t\t\t\tposition: {$set: position},\n\t\t\t\tmarkers: {$set: markers},\n\t\t\t}\n\t\t\treturn update(state, stateChanges)\n\n\t\tcase LOAD_FAILURE:\n\t\t\treturn update(state, {\n\t\t\t\tmessage: {$set: 'Data loading failed'},\n\t\t\t\tdata: {$set: []},\n\t\t\t})\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import React from 'react'\nimport logo from './logo.svg'\n\nconst myLink = (\n    <a\n        href=\"https://robertchristian.me\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n    >\n        Made by Robert Christian\n    </a>\n)\n\nexport default () => (\n    <header className=\"app-root-header\">\n        <style jsx>{`\n            #header-text {\n                margin-left: 20px;\n            }\n            .app-root-logo {\n                position: fixed;\n                top: 0;\n                right: 0;\n                animation: app-root-logo-spin infinite 20s linear;\n                height: 10vmin;\n            }\n            .app-root-header {\n                display: flex;\n                flex-direction: column;\n                font-size: calc(10px + 1vmin);\n                color: white;\n            }\n            @keyframes app-root-logo-spin {\n                from {\n                    transform: rotate(0deg);\n                }\n                to {\n                    transform: rotate(360deg);\n                }\n            }`}\n        </style>\n        <p id=\"header-text\">RedditLite: The Subreddit viewer for React fans. {myLink}.</p>\n        <img src={logo} className=\"app-root-logo\" alt=\"logo\" />\n    </header>\n)\n","import React from 'react'\nimport {Link, withRouter} from 'react-router-dom'\n\nconst SRSelector = withRouter(({\n\tmatch,\n\tsubreddit,\n\tsetSubreddit,\n\tposition,\n\tgoBackward,\n\tgoForward,\n}) => (\n\t<div>\n\t\t<style jsx>{`\n\t\t\tinput {\n\t\t\t\tmargin-left: 20px;\n\t\t\t}`}\n\t\t</style>\n\t\t<input\n\t\t\tid=\"picker\"\n\t\t\ttype=\"text\"\n\t\t\tdefaultValue={match.params.subreddit}\n\t\t\tonChange={({target}) => setSubreddit(target.value)}\n\t\t/>\n\t\t<Link to={`/subreddit/${subreddit}`}>\n\t\t\t<button>Load</button>\n\t\t</Link>\n\t\t<button onClick={goBackward}>&larr;</button>\n\t\t<span>{position}</span>\n\t\t<button onClick={goForward}>&rarr;</button>\n\t</div>\n))\n\nexport default SRSelector\n\n","import {connect} from 'react-redux'\nimport {compose} from 'recompose'\nimport {withState} from 'recompose'\nimport SRSelector from './SRSelector'\nimport {mapStateToProps, mapDispatchToProps} from './connectors'\n\nexport default compose(\n    withState('subreddit', 'setSubreddit', 'reactjs'),\n    connect(mapStateToProps, mapDispatchToProps),\n)(SRSelector)\n","import {goForward, goBackward} from 'src/actions'\n\nexport const mapDispatchToProps = (dispatch) => ({\n\tgoForward: () => dispatch(goForward()),\n\tgoBackward: () => dispatch(goBackward()),\n})\nexport const mapStateToProps = ({position}) => ({\n    position,\n})\n","import React from 'react'\nimport SRSelector from 'src/components/SRSelector'\nimport {Link} from 'react-router-dom'\n\nconst SRIndex = ({ subreddit, data = [] }) => (\n    <div id=\"home\">\n        <style jsx>{`\n            #home {\n                text-align: left;\n            }\n            #threads {\n                width: 100%;\n                text-align: left;\n            }`}\n        </style>\n        <SRSelector />\n        <ul id=\"threads\">\n            {data.map(({ data }, id) => (\n                <li key={id}>\n                    <Link to={`/subreddit/${subreddit}/thread/${data.id}`}>\n                        {data.title}\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    </div>\n)\n\nexport default SRIndex\n","import { connect } from 'react-redux'\nimport { mapStateToProps } from './connectors'\nimport SRIndex from './SRIndex'\n\nexport default connect(mapStateToProps)(SRIndex)\n","\nexport const mapStateToProps = ({ data }) => ({\n    data,\n})\n","import React from 'react'\n\nconst ThreadView = ({ threadId, data = [] }) => {\n\n\t// Logic here could be implemented as a selector\n\tlet match = data.find(thread => (\n\t\t!!thread && !!thread.data && thread.data.id === threadId\n\t))\n\tconst thread = !!match && !!match.data ? match.data : {}\n\t// Logic here could be implemented as a selector\n\n\treturn (\n\t\t<div id=\"thread-viewer\">\n\t\t\t<style jsx>{`\n\t\t\t\t#thread-viewer {\n\t\t\t\t\ttext-align: left;\n\t\t\t\t\tmargin-left: 20px;\n\t\t\t\t}`}\n\t\t\t</style>\n\t\t\t<h2>Title:<br />{thread.title}</h2>\n\t\t\t<h3>Body:</h3>\n\t\t\t<pre>{thread.selftext}</pre>\n\t\t\t<h3>Raw data:</h3>\n\t\t\t<pre>{JSON.stringify(thread, null, '\\t')}</pre>\n\t\t</div>\n\t)\n}\n\nexport default ThreadView\n","import {connect} from 'react-redux'\nimport ThreadView from './ThreadView'\nimport {mapStateToProps} from './connectors'\n\nexport default connect(mapStateToProps)(ThreadView)\n","\nexport const mapStateToProps = ({ data }) => ({\n    data,\n})\n","import LandingPage from './LandingPage'\n\nexport default LandingPage\n","import React from 'react'\nimport initialState from 'src/constants/initial-state'\nimport {Link} from 'react-router-dom'\n\nexport default (props) => (\n\t<div>\n\t\t<Link\n\t\t\tto={`/subreddit/${initialState.subreddit}`}\n\t\t>\n\t\t\tClick here to get started\n\t\t</Link>\n\t</div>\n)\n","import createHistory from 'history/createBrowserHistory'\nimport getStore from 'src/store'\nimport {setSubreddit} from 'src/actions'\nimport {subredditFromPathString} from 'src/helpers'\nimport initialState from 'src/constants/initial-state'\n\nconst history = createHistory()\nconst store = getStore()\n\nlet lastSubreddit = initialState.subreddit\n\n// Redux actions can dispatch upon route changes from here\nhistory.listen((location, action) => {\n\n\tconst curSubreddit = subredditFromPathString(location.pathname)\n\t// console.log(action, lastSubreddit, curSubreddit)\n\n\tif (['POP','PUSH'].includes(action) && curSubreddit !== lastSubreddit) {\n\t\tstore.dispatch(setSubreddit(curSubreddit))\n\t}\n\n\tlastSubreddit = curSubreddit\n})\n\nexport default history\n","import React from 'react'\nimport {withRouter} from 'react-router-dom'\nimport {compose, withProps} from 'recompose'\n\n/*\n\tHOC components to provide query param as prop\n*/\nexport const QueryParamHOC = (propNames, Child) => (\n\twithRouter((props) => {\n\n\t\tlet params = {}\n\t\tpropNames.forEach(propName => {\n\t\t\tparams[propName] = props.match.params[propName]\n\t\t})\n\n\t\tconst NewChild = compose(\n\t\t\twithProps(params)\n\t\t)(Child)\n\n\t\treturn <NewChild />\n\t})\n)\n","import React from 'react'\nimport Header from 'src/components/Header'\nimport SRIndex from 'src/components/SRIndex'\nimport ThreadView from 'src/components/ThreadView'\nimport LandingPage from 'src/components/LandingPage'\nimport {Router, Route, Switch} from 'react-router-dom'\nimport history from 'src/logic/router-events'\nimport {QueryParamHOC} from 'src/components/HOC'\n\n\nconst Notfound = () => (\n\t<div>\n\t\t<h1>Page Not Found</h1>\n\t</div>\n)\n\nconst App = () => (\n\t<div className=\"app-root\">\n\t\t<style jsx>{`\n\t\t\t.app-root {\n\t\t\t\ttext-align: left;\n\t\t\t\tbackground-color: #282c34;\n\t\t\t}`}\n\t\t</style>\n\t\t<Header />\n\t\t<Router history={history}>\n\t\t\t<Switch>\n\t\t\t\t<Route\n\t\t\t\t\texact\n\t\t\t\t\tpath=\"/\"\n\t\t\t\t\tcomponent={LandingPage}\n\t\t\t\t/>\n\t\t\t\t<Route\n\t\t\t\t\texact\n\t\t\t\t\tpath=\"/subreddit/:subreddit\"\n\t\t\t\t\tcomponent={QueryParamHOC(['subreddit'], SRIndex)}\n\t\t\t\t/>\n\t\t\t\t<Route\n\t\t\t\t\texact\n\t\t\t\t\tpath=\"/subreddit/:subreddit/thread/:threadId\"\n\t\t\t\t\tcomponent={QueryParamHOC(['subreddit', 'threadId'], ThreadView)}\n\t\t\t\t/>\n\t\t\t\t<Route\n\t\t\t\t\tcomponent={Notfound}\n\t\t\t\t/>\n\t\t\t</Switch>\n\t\t</Router>\n\t</div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {setSubreddit} from 'src/actions'\nimport getStore from 'src/store'\nimport {subredditFromPathString} from 'src/helpers'\n\nimport 'src/index.css'\nimport App from 'src/app'\nimport * as serviceWorker from 'src/serviceWorker'\n\nconst store = getStore()\nconst subreddit = subredditFromPathString(window.location.pathname)\nstore.dispatch(setSubreddit(subreddit))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}